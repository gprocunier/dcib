---
- name: prep devices
  hosts: all
  connection: local
  tasks:
    - name: shut down cinder volume groups
      shell: vgchange -an {{ item.key }}
      with_dict: "{{ vdocfg | combine(lvmcfg) }}"
      tags: clean
      ignore_errors: true
    - name: remove cinder volume groups
      lvg:
        vg: "{{ item.key }}"
        state: absent
      with_dict: "{{ vdocfg | combine(lvmcfg) }}"
      tags: clean
      ignore_errors: true
    - name: shut down pre-existing vdo sets
      shell: vdo remove -n {{ item.key }}
      with_dict: "{{ vdocfg }}"
      ignore_errors: true
      tags: clean
    - name: shut down pre-existing raid sets
      shell: /usr/sbin/mdadm --stop {{ item.key }}
      with_dict: "{{ raidcfg }}"
      ignore_errors: true
      tags: clean
    - name: remove pre-existing raid sets
      shell: /usr/sbin/mdadm --remove {{ item.key }}
      with_dict: "{{ raidcfg }}"
      ignore_errors: true
      tags: clean
    - name: zero superblocks 
      shell: "/usr/sbin/mdadm --zero-superblock {{ item.value.devices | join(' ') }}"
      loop: "{{ lookup('dict', raidcfg) }}"
      ignore_errors: true
      tags: clean
    - name: wipe devs
      shell: /usr/bin/dd if=/dev/zero of={{ item.path }} bs=4M oflag=direct count=256
      with_items:
        - "{{ devs.samsung_980p_1tb }}" 
        - "{{ devs.samsung_983e_2tb }}"
        - "{{ devs.intel_optane_p5800x }}"
      tags: clean
    - name: create partition schema for samsung_980p_1tb devices
      include_tasks: task_create_table.yml
      loop: "{{ devs.samsung_980p_1tb | flatten(levels=1) }}"
      loop_control:
        loop_var: dev
      tags: parted
    - name: create partition schema for samsung_983e_2tb devices
      include_tasks: task_create_table.yml
      loop: "{{ devs.samsung_983e_2tb | flatten(levels=1) }}"
      loop_control:
        loop_var: dev
      tags: parted
    - name: create partition schema for intel_optane_p5800x devices
      include_tasks: task_create_table.yml
      loop: "{{ devs.intel_optane_p5800x | flatten(levels=1) }}"
      loop_control:
        loop_var: dev
      tags: parted
    - name: create raid sets
      shell: "/usr/sbin/mdadm --create {{ item.key }} --chunk={{ item.value.chunk }} --raid-devices={{ item.value.members }} --level=0 {{ item.value.devices | join(' ') }}"
      loop: "{{ lookup('dict', raidcfg) }}"
      tags: raid
    - name: create vdo sets
      shell:
        cmd: |
          vdo \
            create \
              --name={{ item.key }} \
              --device={{ item.value.device }} \
              --vdoLogicalSize={{ item.value.logical_size }} \
              --compression {{ item.value.compression | default("enabled") }} \
              --deduplication {{ item.value.deduplication | default("enabled") }} \
              --vdoLogicalThreads {{ item.value.vdoLogicalThreads | default("1") }} \
              --vdoPhysicalThreads {{ item.value.vdoPhysicalThreads | default("1") }} \
              --vdoCpuThreads {{ item.value.CpuThreads | default("2") }} \
              --vdoHashZoneThreads {{ item.value.vdoHashZoneThreads | default("1") }} \
              --vdoAckThreads {{ item.value.vdoAckThreads | default("1") }} \
              --vdoBioThreads {{ item.value.vdoBioThreads | default("4") }} \
              --vdoSlabSize {{ item.value.vdoSlabSize | default("2g") }}
      with_dict: "{{ vdocfg }}"
      tags: vdo
    - name: attach vdo-lvm for consumption by cinder
      lvg:
        vg: "{{ item.key }}"
        pvs: "/dev/mapper/{{ item.key }}"
        pesize: "32"
        vg_options: "--alloc contiguous"
      with_dict: "{{ vdocfg }}"
      tags: lvm
    - name: attach standard lvm for consumption by cinder
      lvg:
        vg: "{{ item.key }}"
        pvs: "{{ item.value.device }}"
        pesize: "{{ item.value.pe_size }}"
        vg_options: "{{ item.value.vg_options }}"
      with_dict: "{{ lvmcfg }}"
      tags: lvm
