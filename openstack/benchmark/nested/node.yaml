heat_template_version: rocky
  
parameters:
  config_data:
    type: json
    default: {}
  node_bridge:
    type: json
    default: {}

resources:

  my_instance_port:
    type: OS::Neutron::Port
    properties:
      network_id:
        get_param: [ node_bridge, private_net_id  ]
      fixed_ips:
        get_param: [ node_bridge, fixed_ips ]
      security_groups:
        get_param: [ node_bridge, security_groups ]

  nodeconfig:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      inputs:
      outputs:
        - name: deployment-output
      config:
        str_replace:
          template:
            get_param: [ node_bridge, cloud_init ]
          params:
            ___NFS_SHARE___:
              get_param: [ node_bridge, share_location ]


  mimepayload:
    type: OS::Heat::MultipartMime
    depends_on: nodeconfig
    properties:
      parts:
        - config:
            get_resource: nodeconfig

  boot_volume:
    type: OS::Cinder::Volume
    properties:
      size:
        get_param: [ node_bridge, boot_volume_size ]
      image:
        get_param: [ node_bridge, image ]
      volume_type:
        get_param: [ node_bridge, boot_volume_type ]
      description:
        str_replace:
          template:
            ___INSTANCE_NAME___ boot volume
          params:
            ___INSTANCE_NAME___:
              get_param: [ node_bridge, guest_name ]

  my_instance:
    type: OS::Nova::Server
    depends_on: my_instance_port
    depends_on: mimepayload
    depends_on: boot_volume
    properties:
      name:
        get_param: [ node_bridge, guest_name ]
      block_device_mapping_v2:
       - device_name: "sda"
         disk_bus: "scsi"
         volume_id: { get_resource: boot_volume }
         delete_on_termination: false
      flavor:
        get_param: [ node_bridge, flavor ]
      key_name:
        get_param: [ config_data, ssh_keypair ]
      networks:
        - port: { get_resource: my_instance_port }
      user_data_format: SOFTWARE_CONFIG
      user_data:
        get_resource: mimepayload


  extra_volumes:
    type: OS::Heat::ResourceGroup
    depends_on: my_instance
    properties:
      count:
        yaql:
          expression: $.data.len()
          data:
            get_param: [ node_bridge, extra_volumes ]
      resource_def:
        type:
          get_param: [ config_data, templates, extra_volumes ]
        properties:
          instance_id:
            get_resource: my_instance
          volume_size:
            get_param: [ node_bridge, %index%, size ]
          volume_type:
            get_param: [ node_bridge, %index%, volume_type ]
          volume_description:
            get_param: [ node_bridge, guest_name ]
