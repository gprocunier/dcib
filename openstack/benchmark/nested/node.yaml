heat_template_version: rocky
  
parameters:
  config_data:
    type: json
    default: {}
  node_bridge:
    type: json
    default: {}

conditions:
  has_boot_volume_type:
    not:
      equals: [ { get_param: [ node_bridge, boot_volume_type ] }, '' ]
  has_boot_volume_size:
    not:
      equals: [ { get_param: [ node_bridge, boot_volume_size ] }, '' ]


resources:

  my_instance_port:
    type: OS::Neutron::Port
    properties:
      network_id:
        get_param: [ node_bridge, private_net_id  ]
      fixed_ips:
        get_param: [ node_bridge, fixed_ips ]
      security_groups:
        get_param: [ node_bridge, security_groups ]

  nodeconfig:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      inputs:
      outputs:
        - name: deployment-output
      config:
        str_replace:
          template:
            get_param: [ node_bridge, cloud_init ]
          params:
            ___NFS_SHARE___:
              get_param: [ node_bridge, share_location ]


  mimepayload:
    type: OS::Heat::MultipartMime
    depends_on: nodeconfig
    properties:
      parts:
        - config:
            get_resource: nodeconfig

  my_instance:
    type: OS::Nova::Server
    depends_on: my_instance_port
    depends_on: mimepayload
    properties:
      name:
        get_param: [ node_bridge, guest_name ]
      flavor:
        get_param: [ node_bridge, flavor ]
      key_name:
        get_param: [ config_data, ssh_keypair ]
      networks:
        - port: { get_resource: my_instance_port }
      user_data_format: SOFTWARE_CONFIG
      user_data:
        get_resource: mimepayload

  boot_volume:
    type: OS::Cinder::Volume
    depends_on: my_instance
    properties:
      image:
        get_param: [ node_bridge, os_image ]
      size:
        if:
          - "has_boot_volume_size"
          - { get_param: [ node_bridge, boot_volume_size ] }
          - 40
      description:
        str_replace:
          template:
            ___INSTANCE_NAME___ boot volume
          params:
            ___INSTANCE_NAME___:
              get_param: [ node_bridge, guest_name ]
      volume_type:
        if:
          - "has_boot_volume_type"
          - { get_param: [ node_bridge, boot_volume_type ] }
          - tripleo
          
  attachment:
    type: OS::Cinder::VolumeAttachment
    depends_on: boot_volume
    properties:
      volume_id:
        get_resource: boot_volume
      instance_uuid:
        get_resource: my_instance



